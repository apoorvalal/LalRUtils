% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/csv_to_sqlite.R
\name{csv_to_sqlite}
\alias{csv_to_sqlite}
\title{Fork of inborutils::csv_to_sqlite to save a delimited text table into a single table
sqlite database that can then be munged w dplyr/ dbplyr / sqldf}
\usage{
csv_to_sqlite(
  csv_file,
  sqlite_file,
  table_name,
  delimiter = ",",
  pre_process_size = 1000,
  chunk_size = 50000,
  show_progress_bar = TRUE,
  ...
)
}
\arguments{
\item{csv_file}{Name of the text file to convert.}

\item{sqlite_file}{Name of the newly created sqlite file.}

\item{table_name}{Name of the table to store the data table in the sqlite
database.}

\item{pre_process_size}{Number of lines to check the data types of the
individual columns (default 1000).}

\item{chunk_size}{Number of lines to read for each chunk (default 50000).}

\item{show_progress_bar}{Show progress bar (default TRUE).}

\item{...}{Further arguments to be passed to \code{read_delim}.}

\item{delim}{Text file delimiter (default ",").}
}
\value{
a SQLite database
}
\description{
The table can be a comma separated (csv) or a tab separated (tsv) or any
other delimited text file. The file is read in chunks. Each chunk is copied
in the same sqlite table database before the next chunk is loaded into
memory. See the INBO tutorial \href{https://inbo.github.io/tutorials/tutorials/r_large_data_files_handling/#convertsqlite}{Handling large files in R}
to learn more.
}
\section{Remark}{

The \code{callback} argument in the \code{read_delim_chunked} function call
refers to the custom written callback function `append_to_sqlite` applied
to each chunk.
}

